Adobe Flash Player MovieClip Obj UAF With Worker

1 Affected Products
=================
Test Version£º
IE8+Flash 17.0.0.134 + hpa

2 Vulnerability Details
====================

When Handle MovieClip Obj With Worker MultiThread,Call Some Special functions£¬

Caused some memory freed,After html reload,May be flash gc worked,

the Freed memory used again.
 

3 Analysis
=========
asm in Flash32_17_0_0_134.ocx

.text:1027FDCE sub_1027FDCE    proc near               ; CODE XREF: sub_1027FE5B+3p
.text:1027FDCE                 push    esi
.text:1027FDCF                 mov     esi, ecx
.text:1027FDD1                 mov     eax, [esi+8]
.text:1027FDD4                 mov     dword ptr [esi], offset off_10BBA400
.text:1027FDDA                 mov     eax, [eax+14h]
.text:1027FDDD                 mov     eax, [eax+4]
.text:1027FDE0                 cmp     byte ptr [eax+5D4h], 0 ; crash  ,eax point memory is freed
.text:1027FDE7                 push    edi
.text:1027FDE8                 jnz     short loc_1027FE23
.text:1027FDEA                 mov     edi, [eax+598h]
.text:1027FDF0                 mov     ecx, edi
.text:1027FDF2                 call    sub_10001988
.text:1027FDF7                 test    al, al
.text:1027FDF9                 jnz     short loc_1027FE23
.text:1027FDFB                 cmp     dword ptr [edi+810h], 0
.text:1027FE02                 jz      short loc_1027FE23
.text:1027FE04                 push    ecx             ; ecx control
.text:1027FE05                 mov     eax, esp
.text:1027FE07                 mov     [eax], esi
.text:1027FE09                 mov     eax, [esi+8]
.text:1027FE0C                 mov     eax, [eax+14h]
.text:1027FE0F                 mov     eax, [eax+4]
.text:1027FE12                 mov     eax, [eax+598h] ; eax we can control
.text:1027FE18                 mov     ecx, [eax+810h]
.text:1027FE1E                 call    sub_1018A99E


..

.text:10666230 sub_10666230    proc near               ; CODE XREF: sub_1012F8E0+Cp
.text:10666230                                         ; sub_102D61A8+11p
.text:10666230
.text:10666230 arg_0           = dword ptr  4
.text:10666230
.text:10666230                 push    ebx
.text:10666231                 push    ebp
.text:10666232                 mov     ebp, ecx        ; control
.text:10666234                 mov     eax, [ebp+0]
.text:10666237                 mov     ebx, [eax+4]
.text:1066623A                 push    esi
.text:1066623B                 xor     esi, esi
.text:1066623D                 push    edi
.text:1066623E                 test    ebx, ebx
.text:10666240                 jbe     short loc_10666268
.text:10666242                 mov     edi, 8
.text:10666247
.text:10666247 loc_10666247:                           ; CODE XREF: sub_10666230+36j
.text:10666247                 mov     ecx, [ebp+0]
.text:1066624A                 mov     ecx, [edi+ecx]
.text:1066624D                 test    ecx, ecx        ; ecx control
.text:1066624F                 jz      short loc_10666258
.text:10666251                 call    sub_105F1C40


.text:105F1C40 sub_105F1C40    proc near               ; CODE XREF: sub_1001DCA6+7p
.text:105F1C40                                         ; sub_1002FE45+90p ...
.text:105F1C40                 push    ebx
.text:105F1C41                 mov     ebx, ecx        ; ecx control
.text:105F1C43                 mov     eax, [ebx]
.text:105F1C45                 test    eax, eax
.text:105F1C47                 jz      error
.text:105F1C4D                 mov     ecx, eax
.text:105F1C4F                 and     ecx, 0FFFFF000h
.text:105F1C55                 push    edi
.text:105F1C56                 mov     edi, [ecx+8]
.text:105F1C59                 cmp     byte ptr [edi+2AAh], 0
.text:105F1C60                 jz      error1
.text:105F1C66                 push    esi
.text:105F1C67                 mov     edx, eax
.text:105F1C69                 and     edx, 0FFFFF000h
.text:105F1C6F                 mov     cl, [edx+1]
.text:105F1C72                 mov     edx, [edx+14h]
.text:105F1C75                 mov     esi, eax
.text:105F1C77                 and     esi, 0FFFh
.text:105F1C7D                 shr     esi, cl
.text:105F1C7F                 test    byte ptr [esi+edx], 1
.text:105F1C83                 jnz     short error2
.text:105F1C85                 cmp     byte ptr [edi+2ACh], 0
.text:105F1C8C                 jz      short error2
.text:105F1C8E                 mov     edx, eax
.text:105F1C90                 and     edx, 0FFFFF000h
.text:105F1C96                 mov     cl, [edx+1]
.text:105F1C99                 and     eax, 0FFFh
.text:105F1C9E                 shr     eax, cl
.text:105F1CA0                 mov     ecx, [edx+14h]
.text:105F1CA3                 or      byte ptr [eax+ecx], 2
.text:105F1CA7                 mov     edx, [edi+2C8h]
.text:105F1CAD                 add     eax, ecx
.text:105F1CAF                 lea     esi, [edi+2C4h]
.text:105F1CB5                 add     edx, 4
.text:105F1CB8                 push    ebp
.text:105F1CB9                 mov     ebp, [ebx]
.text:105F1CBB                 cmp     edx, [esi+8]
.text:105F1CBE                 jbe     short loc_105F1CCD
.text:105F1CC0                 push    0
.text:105F1CC2                 mov     ecx, esi
.text:105F1CC4                 call    sub_105F79D0
.text:105F1CC9                 test    al, al
.text:105F1CCB                 jz      short loc_105F1CE4
.text:105F1CCD
.text:105F1CCD loc_105F1CCD:                           ; CODE XREF: sub_105F1C40+7Ej
.text:105F1CCD                 add     dword ptr [esi+4], 4 ; write control address
.text:105F1CD1                 mov     esi, [esi+4]
......



4 Exploitable?
============
In order to exploit this Use-after-Free Vulnerability to execute shellcode, an attacker may use multithread feature of Flash to HeapSpray the memory between the "Free" and "Use".


5 Crash info:
===============
(244.cc0): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=0968d020 ebx=0a346728 ecx=0a3a5420 edx=081bfe5b esi=0a3a5420 edi=0a3a5420
eip=081bfde0 esp=0a32f9f4 ebp=0a3a6000 iopl=0         nv up ei pl nz na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206
*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\WINDOWS\system32\Macromed\Flash\Flash32_17_0_0_134.ocx - 
Flash32_17_0_0_134!DllUnregisterServer+0x9bf24:
081bfde0 80b8d405000000  cmp     byte ptr <Unloaded_ud.drv>+0x5d3 (000005d4)[eax],0 ds:0023:0968d5f4=??
0:018> kb
ChildEBP RetAddr  Args to Child              
WARNING: Stack unwind information not available. Following frames may be wrong.
0a32f9f4 081bfe63 0a3a5000 08536a86 00000000 Flash32_17_0_0_134!DllUnregisterServer+0x9bf24
0a32f9fc 08536a86 00000000 0a07f000 0a07f45c Flash32_17_0_0_134!DllUnregisterServer+0x9bfa7
0a32fa24 08532a4b 00000000 0a07f000 0000033b Flash32_17_0_0_134!IAEModule_IAEKernel_UnloadModule+0x74056
00000000 00000000 00000000 00000000 00000000 Flash32_17_0_0_134!IAEModule_IAEKernel_UnloadModule+0x7001b




6 POC:
====

See attachment,open the html with ie8(must set windbg enable page heap flags),wait a few seconds,then crashed


7 About Alibaba Security Research Team:
=====================


